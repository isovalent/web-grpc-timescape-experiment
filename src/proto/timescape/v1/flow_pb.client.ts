/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter add_pb_suffix,eslint_disable,ts_nocheck,generate_dependencies,long_type_number,use_proto_field_name
// @generated from protobuf file "timescape/v1/flow.proto" (package "timescape.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright (C) Isovalent, Inc. - All Rights Reserved.
//
// NOTICE: All information contained herein is, and remains the property of
// Isovalent Inc and its suppliers, if any. The intellectual and technical
// concepts contained herein are proprietary to Isovalent Inc and its suppliers
// and may be covered by U.S. and Foreign Patents, patents in process, and are
// protected by trade secret or copyright law.  Dissemination of this
// information or reproduction of this material is strictly forbidden unless
// prior written permission is obtained from Isovalent Inc.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FlowService } from "./flow_pb";
import type { GetFlowsSummaryResponse } from "./flow_pb";
import type { GetFlowsSummaryRequest } from "./flow_pb";
import type { GetNamespacesResponse } from "./flow_pb";
import type { GetNamespacesRequest } from "./flow_pb";
import type { GetFlowCountResponse } from "./flow_pb";
import type { GetFlowCountRequest } from "./flow_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetFlowResponse } from "./flow_pb";
import type { GetFlowRequest } from "./flow_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * FlowService is a service that offers network flow related information.
 *
 * @generated from protobuf service timescape.v1.FlowService
 */
export interface IFlowServiceClient {
    /**
     * GetFlow returns the flow that corresponds to the unique identifier.
     *
     * @generated from protobuf rpc: GetFlow(timescape.v1.GetFlowRequest) returns (timescape.v1.GetFlowResponse);
     */
    getFlow(input: GetFlowRequest, options?: RpcOptions): UnaryCall<GetFlowRequest, GetFlowResponse>;
    /**
     * GetFlowCount returns the flow count per time window. If the duration of
     * the time window is 0, results are not aggregated by window. The filter
     * parameter can be used to limit the scope to flows that match the filter
     * (e.g. time range).
     *
     * @generated from protobuf rpc: GetFlowCount(timescape.v1.GetFlowCountRequest) returns (stream timescape.v1.GetFlowCountResponse);
     */
    getFlowCount(input: GetFlowCountRequest, options?: RpcOptions): ServerStreamingCall<GetFlowCountRequest, GetFlowCountResponse>;
    /**
     * GetNamespaces returns a unique list of namespaces seen in the hubble flows
     * (either as a source, or a destination).
     *
     * @generated from protobuf rpc: GetNamespaces(timescape.v1.GetNamespacesRequest) returns (timescape.v1.GetNamespacesResponse);
     */
    getNamespaces(input: GetNamespacesRequest, options?: RpcOptions): UnaryCall<GetNamespacesRequest, GetNamespacesResponse>;
    /**
     * GetFlowsSummary allows retrieval of multiple flows at the same time.
     *
     * @generated from protobuf rpc: GetFlowsSummary(timescape.v1.GetFlowsSummaryRequest) returns (stream timescape.v1.GetFlowsSummaryResponse);
     */
    getFlowsSummary(input: GetFlowsSummaryRequest, options?: RpcOptions): ServerStreamingCall<GetFlowsSummaryRequest, GetFlowsSummaryResponse>;
}
/**
 * FlowService is a service that offers network flow related information.
 *
 * @generated from protobuf service timescape.v1.FlowService
 */
export class FlowServiceClient implements IFlowServiceClient, ServiceInfo {
    typeName = FlowService.typeName;
    methods = FlowService.methods;
    options = FlowService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetFlow returns the flow that corresponds to the unique identifier.
     *
     * @generated from protobuf rpc: GetFlow(timescape.v1.GetFlowRequest) returns (timescape.v1.GetFlowResponse);
     */
    getFlow(input: GetFlowRequest, options?: RpcOptions): UnaryCall<GetFlowRequest, GetFlowResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFlowRequest, GetFlowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetFlowCount returns the flow count per time window. If the duration of
     * the time window is 0, results are not aggregated by window. The filter
     * parameter can be used to limit the scope to flows that match the filter
     * (e.g. time range).
     *
     * @generated from protobuf rpc: GetFlowCount(timescape.v1.GetFlowCountRequest) returns (stream timescape.v1.GetFlowCountResponse);
     */
    getFlowCount(input: GetFlowCountRequest, options?: RpcOptions): ServerStreamingCall<GetFlowCountRequest, GetFlowCountResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFlowCountRequest, GetFlowCountResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetNamespaces returns a unique list of namespaces seen in the hubble flows
     * (either as a source, or a destination).
     *
     * @generated from protobuf rpc: GetNamespaces(timescape.v1.GetNamespacesRequest) returns (timescape.v1.GetNamespacesResponse);
     */
    getNamespaces(input: GetNamespacesRequest, options?: RpcOptions): UnaryCall<GetNamespacesRequest, GetNamespacesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNamespacesRequest, GetNamespacesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetFlowsSummary allows retrieval of multiple flows at the same time.
     *
     * @generated from protobuf rpc: GetFlowsSummary(timescape.v1.GetFlowsSummaryRequest) returns (stream timescape.v1.GetFlowsSummaryResponse);
     */
    getFlowsSummary(input: GetFlowsSummaryRequest, options?: RpcOptions): ServerStreamingCall<GetFlowsSummaryRequest, GetFlowsSummaryResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFlowsSummaryRequest, GetFlowsSummaryResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
