// Copyright 2020 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.3
// source: ui/ui.proto

package ui

import (
	flow "github.com/cilium/cilium/api/v1/flow"
	observer "github.com/cilium/cilium/api/v1/observer"
	aggregation "github.com/cilium/cilium/enterprise/plugins/hubble-flow-aggregation/api/aggregation"
	v11 "github.com/isovalent/hubble-k8s-exporter/proto/k8sevent/v1"
	v0 "github.com/isovalent/hubble-timescape/api/timescape/v0"
	v1 "github.com/isovalent/hubble-timescape/api/timescape/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN_EVENT       EventType = 0
	EventType_FLOW                EventType = 1
	EventType_K8S_NAMESPACE_STATE EventType = 2
	EventType_SERVICE_STATE       EventType = 3
	EventType_SERVICE_LINK_STATE  EventType = 4
	EventType_POLICY_STATE        EventType = 5
	EventType_FLOWS               EventType = 6
	EventType_STATUS              EventType = 7
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "UNKNOWN_EVENT",
		1: "FLOW",
		2: "K8S_NAMESPACE_STATE",
		3: "SERVICE_STATE",
		4: "SERVICE_LINK_STATE",
		5: "POLICY_STATE",
		6: "FLOWS",
		7: "STATUS",
	}
	EventType_value = map[string]int32{
		"UNKNOWN_EVENT":       0,
		"FLOW":                1,
		"K8S_NAMESPACE_STATE": 2,
		"SERVICE_STATE":       3,
		"SERVICE_LINK_STATE":  4,
		"POLICY_STATE":        5,
		"FLOWS":               6,
		"STATUS":              7,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ui_ui_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_ui_ui_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{0}
}

// IP protocols. The values of enums do not correspond to actual IP protocol
// numbers.
type IPProtocol int32

const (
	IPProtocol_UNKNOWN_IP_PROTOCOL IPProtocol = 0
	IPProtocol_TCP                 IPProtocol = 1
	IPProtocol_UDP                 IPProtocol = 2
	IPProtocol_ICMP_V4             IPProtocol = 3
	IPProtocol_ICMP_V6             IPProtocol = 4
)

// Enum value maps for IPProtocol.
var (
	IPProtocol_name = map[int32]string{
		0: "UNKNOWN_IP_PROTOCOL",
		1: "TCP",
		2: "UDP",
		3: "ICMP_V4",
		4: "ICMP_V6",
	}
	IPProtocol_value = map[string]int32{
		"UNKNOWN_IP_PROTOCOL": 0,
		"TCP":                 1,
		"UDP":                 2,
		"ICMP_V4":             3,
		"ICMP_V6":             4,
	}
)

func (x IPProtocol) Enum() *IPProtocol {
	p := new(IPProtocol)
	*p = x
	return p
}

func (x IPProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ui_ui_proto_enumTypes[1].Descriptor()
}

func (IPProtocol) Type() protoreflect.EnumType {
	return &file_ui_ui_proto_enumTypes[1]
}

func (x IPProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPProtocol.Descriptor instead.
func (IPProtocol) EnumDescriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{1}
}

type PolicySpecType int32

const (
	PolicySpecType_CILIUM_NETWORK_POLICY             PolicySpecType = 0
	PolicySpecType_KUBERNETES_NETWORK_POLICY         PolicySpecType = 1
	PolicySpecType_CILIUM_CLUSTERWIDE_NETWORK_POLICY PolicySpecType = 2
)

// Enum value maps for PolicySpecType.
var (
	PolicySpecType_name = map[int32]string{
		0: "CILIUM_NETWORK_POLICY",
		1: "KUBERNETES_NETWORK_POLICY",
		2: "CILIUM_CLUSTERWIDE_NETWORK_POLICY",
	}
	PolicySpecType_value = map[string]int32{
		"CILIUM_NETWORK_POLICY":             0,
		"KUBERNETES_NETWORK_POLICY":         1,
		"CILIUM_CLUSTERWIDE_NETWORK_POLICY": 2,
	}
)

func (x PolicySpecType) Enum() *PolicySpecType {
	p := new(PolicySpecType)
	*p = x
	return p
}

func (x PolicySpecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySpecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ui_ui_proto_enumTypes[2].Descriptor()
}

func (PolicySpecType) Type() protoreflect.EnumType {
	return &file_ui_ui_proto_enumTypes[2]
}

func (x PolicySpecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySpecType.Descriptor instead.
func (PolicySpecType) EnumDescriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{2}
}

type StateChange int32

const (
	StateChange_UNKNOWN_STATE_CHANGE StateChange = 0
	StateChange_ADDED                StateChange = 1
	StateChange_MODIFIED             StateChange = 2
	StateChange_DELETED              StateChange = 3
	// This is needed in case the relay server knows that the service exists,
	// but it doesn't know when it got created.
	StateChange_EXISTS StateChange = 4
)

// Enum value maps for StateChange.
var (
	StateChange_name = map[int32]string{
		0: "UNKNOWN_STATE_CHANGE",
		1: "ADDED",
		2: "MODIFIED",
		3: "DELETED",
		4: "EXISTS",
	}
	StateChange_value = map[string]int32{
		"UNKNOWN_STATE_CHANGE": 0,
		"ADDED":                1,
		"MODIFIED":             2,
		"DELETED":              3,
		"EXISTS":               4,
	}
)

func (x StateChange) Enum() *StateChange {
	p := new(StateChange)
	*p = x
	return p
}

func (x StateChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateChange) Descriptor() protoreflect.EnumDescriptor {
	return file_ui_ui_proto_enumTypes[3].Descriptor()
}

func (StateChange) Type() protoreflect.EnumType {
	return &file_ui_ui_proto_enumTypes[3]
}

func (x StateChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateChange.Descriptor instead.
func (StateChange) EnumDescriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{3}
}

// Here I didn't include "follow", "until", and "number". This request assumes
// follow, and lets the client decide when to end the request, whether it's
// based on timestamp or the number of responses received.
type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EventType specifies which types of events to subscribe to. If unspecified,
	// the request is subscribed to all the event types.
	EventTypes    []EventType              `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=ui.EventType" json:"event_types,omitempty"`
	Blacklist     []*EventFilter           `protobuf:"bytes,2,rep,name=blacklist,proto3" json:"blacklist,omitempty"`
	Whitelist     []*EventFilter           `protobuf:"bytes,3,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	Since         *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"`
	StatusRequest *GetStatusRequest        `protobuf:"bytes,5,opt,name=status_request,json=statusRequest,proto3" json:"status_request,omitempty"`
	Aggregation   *aggregation.Aggregation `protobuf:"bytes,10001,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{0}
}

func (x *GetEventsRequest) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *GetEventsRequest) GetBlacklist() []*EventFilter {
	if x != nil {
		return x.Blacklist
	}
	return nil
}

func (x *GetEventsRequest) GetWhitelist() []*EventFilter {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *GetEventsRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *GetEventsRequest) GetStatusRequest() *GetStatusRequest {
	if x != nil {
		return x.StatusRequest
	}
	return nil
}

func (x *GetEventsRequest) GetAggregation() *aggregation.Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Events    []*Event               `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{1}
}

func (x *GetEventsResponse) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *GetEventsResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*Event_Flow
	//	*Event_NamespaceState
	//	*Event_ServiceState
	//	*Event_ServiceLinkState
	//	*Event_Policies
	//	*Event_Flows
	//	*Event_Notification
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{2}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetFlow() *flow.Flow {
	if x, ok := x.GetEvent().(*Event_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *Event) GetNamespaceState() *NamespaceState {
	if x, ok := x.GetEvent().(*Event_NamespaceState); ok {
		return x.NamespaceState
	}
	return nil
}

func (x *Event) GetServiceState() *ServiceState {
	if x, ok := x.GetEvent().(*Event_ServiceState); ok {
		return x.ServiceState
	}
	return nil
}

func (x *Event) GetServiceLinkState() *ServiceLinkState {
	if x, ok := x.GetEvent().(*Event_ServiceLinkState); ok {
		return x.ServiceLinkState
	}
	return nil
}

func (x *Event) GetPolicies() *Policies {
	if x, ok := x.GetEvent().(*Event_Policies); ok {
		return x.Policies
	}
	return nil
}

func (x *Event) GetFlows() *Flows {
	if x, ok := x.GetEvent().(*Event_Flows); ok {
		return x.Flows
	}
	return nil
}

func (x *Event) GetNotification() *Notification {
	if x, ok := x.GetEvent().(*Event_Notification); ok {
		return x.Notification
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Flow struct {
	Flow *flow.Flow `protobuf:"bytes,3,opt,name=flow,proto3,oneof"`
}

type Event_NamespaceState struct {
	NamespaceState *NamespaceState `protobuf:"bytes,4,opt,name=namespace_state,json=namespaceState,proto3,oneof"`
}

type Event_ServiceState struct {
	ServiceState *ServiceState `protobuf:"bytes,5,opt,name=service_state,json=serviceState,proto3,oneof"`
}

type Event_ServiceLinkState struct {
	// It's unclear how we can define what it means for service links to get
	// added/deleted. For now I'm deferring the decision for whether a
	// particular link should be included in the service map to the client.
	// Maybe the server can periodically send service_link events for active
	// links to keep-alive, and the client can expire older links based on their
	// timestamp.
	ServiceLinkState *ServiceLinkState `protobuf:"bytes,6,opt,name=service_link_state,json=serviceLinkState,proto3,oneof"`
}

type Event_Policies struct {
	Policies *Policies `protobuf:"bytes,7,opt,name=policies,proto3,oneof"`
}

type Event_Flows struct {
	Flows *Flows `protobuf:"bytes,8,opt,name=flows,proto3,oneof"`
}

type Event_Notification struct {
	Notification *Notification `protobuf:"bytes,9,opt,name=notification,proto3,oneof"`
}

func (*Event_Flow) isEvent_Event() {}

func (*Event_NamespaceState) isEvent_Event() {}

func (*Event_ServiceState) isEvent_Event() {}

func (*Event_ServiceLinkState) isEvent_Event() {}

func (*Event_Policies) isEvent_Event() {}

func (*Event_Flows) isEvent_Event() {}

func (*Event_Notification) isEvent_Event() {}

type Flows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*flow.Flow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *Flows) Reset() {
	*x = Flows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flows) ProtoMessage() {}

func (x *Flows) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flows.ProtoReflect.Descriptor instead.
func (*Flows) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{3}
}

func (x *Flows) GetFlows() []*flow.Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*PolicySpecState `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{4}
}

func (x *Policies) GetPolicies() []*PolicySpecState {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Here I added different filter types for different events. Another option is
// to reuse and extend FlowFilter to filter all the events, but I worry that it
// might become too confusing in terms of figuring out which filter fields apply
// to which events.
type EventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*EventFilter_FlowFilter
	//	*EventFilter_ServiceFilter
	//	*EventFilter_ServiceLinkFilter
	//	*EventFilter_PolicySpecFilter
	Filter isEventFilter_Filter `protobuf_oneof:"filter"`
}

func (x *EventFilter) Reset() {
	*x = EventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilter) ProtoMessage() {}

func (x *EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilter.ProtoReflect.Descriptor instead.
func (*EventFilter) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{5}
}

func (m *EventFilter) GetFilter() isEventFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *EventFilter) GetFlowFilter() *flow.FlowFilter {
	if x, ok := x.GetFilter().(*EventFilter_FlowFilter); ok {
		return x.FlowFilter
	}
	return nil
}

func (x *EventFilter) GetServiceFilter() *ServiceFilter {
	if x, ok := x.GetFilter().(*EventFilter_ServiceFilter); ok {
		return x.ServiceFilter
	}
	return nil
}

func (x *EventFilter) GetServiceLinkFilter() *ServiceLinkFilter {
	if x, ok := x.GetFilter().(*EventFilter_ServiceLinkFilter); ok {
		return x.ServiceLinkFilter
	}
	return nil
}

func (x *EventFilter) GetPolicySpecFilter() *PolicySpecFilter {
	if x, ok := x.GetFilter().(*EventFilter_PolicySpecFilter); ok {
		return x.PolicySpecFilter
	}
	return nil
}

type isEventFilter_Filter interface {
	isEventFilter_Filter()
}

type EventFilter_FlowFilter struct {
	FlowFilter *flow.FlowFilter `protobuf:"bytes,2,opt,name=flow_filter,json=flowFilter,proto3,oneof"`
}

type EventFilter_ServiceFilter struct {
	ServiceFilter *ServiceFilter `protobuf:"bytes,3,opt,name=service_filter,json=serviceFilter,proto3,oneof"`
}

type EventFilter_ServiceLinkFilter struct {
	ServiceLinkFilter *ServiceLinkFilter `protobuf:"bytes,4,opt,name=service_link_filter,json=serviceLinkFilter,proto3,oneof"`
}

type EventFilter_PolicySpecFilter struct {
	PolicySpecFilter *PolicySpecFilter `protobuf:"bytes,5,opt,name=policy_spec_filter,json=policySpecFilter,proto3,oneof"`
}

func (*EventFilter_FlowFilter) isEventFilter_Filter() {}

func (*EventFilter_ServiceFilter) isEventFilter_Filter() {}

func (*EventFilter_ServiceLinkFilter) isEventFilter_Filter() {}

func (*EventFilter_PolicySpecFilter) isEventFilter_Filter() {}

type NamespaceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Timescape         bool                   `protobuf:"varint,4,opt,name=timescape,proto3" json:"timescape,omitempty"`
}

func (x *NamespaceDescriptor) Reset() {
	*x = NamespaceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDescriptor) ProtoMessage() {}

func (x *NamespaceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDescriptor.ProtoReflect.Descriptor instead.
func (*NamespaceDescriptor) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{6}
}

func (x *NamespaceDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NamespaceDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceDescriptor) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *NamespaceDescriptor) GetTimescape() bool {
	if x != nil {
		return x.Timescape
	}
	return false
}

type NamespaceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceDescriptor `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      StateChange          `protobuf:"varint,2,opt,name=type,proto3,enum=ui.StateChange" json:"type,omitempty"`
}

func (x *NamespaceState) Reset() {
	*x = NamespaceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceState) ProtoMessage() {}

func (x *NamespaceState) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceState.ProtoReflect.Descriptor instead.
func (*NamespaceState) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{7}
}

func (x *NamespaceState) GetNamespace() *NamespaceDescriptor {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *NamespaceState) GetType() StateChange {
	if x != nil {
		return x.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

// Come up with a better name for Service.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An opaque ID that uniquely identifies the service.
	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace             string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels                []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	DnsNames              []string `protobuf:"bytes,5,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	EgressPolicyEnforced  bool     `protobuf:"varint,6,opt,name=egress_policy_enforced,json=egressPolicyEnforced,proto3" json:"egress_policy_enforced,omitempty"`
	IngressPolicyEnforced bool     `protobuf:"varint,7,opt,name=ingress_policy_enforced,json=ingressPolicyEnforced,proto3" json:"ingress_policy_enforced,omitempty"`
	// This is a string instead of boolean because Cilium reports status message.
	// If it's successfully enabled, this string is set to "OK" I think.
	VisibilityPolicyStatus string `protobuf:"bytes,8,opt,name=visibility_policy_status,json=visibilityPolicyStatus,proto3" json:"visibility_policy_status,omitempty"`
	// We probably can't reliably set creation timestamp.
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Workloads         []*flow.Workload       `protobuf:"bytes,10,rep,name=workloads,proto3" json:"workloads,omitempty"`
	Identity          uint32                 `protobuf:"varint,12,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{8}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Service) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Service) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *Service) GetEgressPolicyEnforced() bool {
	if x != nil {
		return x.EgressPolicyEnforced
	}
	return false
}

func (x *Service) GetIngressPolicyEnforced() bool {
	if x != nil {
		return x.IngressPolicyEnforced
	}
	return false
}

func (x *Service) GetVisibilityPolicyStatus() string {
	if x != nil {
		return x.VisibilityPolicyStatus
	}
	return ""
}

func (x *Service) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *Service) GetWorkloads() []*flow.Workload {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *Service) GetIdentity() uint32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service    `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Type    StateChange `protobuf:"varint,2,opt,name=type,proto3,enum=ui.StateChange" json:"type,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceState) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ServiceState) GetType() StateChange {
	if x != nil {
		return x.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

type ServiceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace []string `protobuf:"bytes,1,rep,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ServiceFilter) Reset() {
	*x = ServiceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceFilter) ProtoMessage() {}

func (x *ServiceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceFilter.ProtoReflect.Descriptor instead.
func (*ServiceFilter) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceFilter) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ServiceLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An opaque ID that uniquely identifies this link.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// source Service id
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// destination Service id
	DestinationId   string               `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	DestinationPort uint32               `protobuf:"varint,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	IpProtocol      IPProtocol           `protobuf:"varint,5,opt,name=ip_protocol,json=ipProtocol,proto3,enum=ui.IPProtocol" json:"ip_protocol,omitempty"`
	Verdict         flow.Verdict         `protobuf:"varint,6,opt,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
	FlowAmount      uint64               `protobuf:"varint,7,opt,name=flow_amount,json=flowAmount,proto3" json:"flow_amount,omitempty"`
	Latency         *ServiceLink_Latency `protobuf:"bytes,8,opt,name=latency,proto3" json:"latency,omitempty"`
	BytesTransfered uint64               `protobuf:"varint,9,opt,name=bytes_transfered,json=bytesTransfered,proto3" json:"bytes_transfered,omitempty"`
	AuthType        flow.AuthType        `protobuf:"varint,10,opt,name=auth_type,json=authType,proto3,enum=flow.AuthType" json:"auth_type,omitempty"`
	IsEncrypted     bool                 `protobuf:"varint,11,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
}

func (x *ServiceLink) Reset() {
	*x = ServiceLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLink) ProtoMessage() {}

func (x *ServiceLink) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLink.ProtoReflect.Descriptor instead.
func (*ServiceLink) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceLink) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *ServiceLink) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *ServiceLink) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *ServiceLink) GetIpProtocol() IPProtocol {
	if x != nil {
		return x.IpProtocol
	}
	return IPProtocol_UNKNOWN_IP_PROTOCOL
}

func (x *ServiceLink) GetVerdict() flow.Verdict {
	if x != nil {
		return x.Verdict
	}
	return flow.Verdict(0)
}

func (x *ServiceLink) GetFlowAmount() uint64 {
	if x != nil {
		return x.FlowAmount
	}
	return 0
}

func (x *ServiceLink) GetLatency() *ServiceLink_Latency {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *ServiceLink) GetBytesTransfered() uint64 {
	if x != nil {
		return x.BytesTransfered
	}
	return 0
}

func (x *ServiceLink) GetAuthType() flow.AuthType {
	if x != nil {
		return x.AuthType
	}
	return flow.AuthType(0)
}

func (x *ServiceLink) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

type ServiceLinkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceLink *ServiceLink `protobuf:"bytes,1,opt,name=service_link,json=serviceLink,proto3" json:"service_link,omitempty"`
	Type        StateChange  `protobuf:"varint,2,opt,name=type,proto3,enum=ui.StateChange" json:"type,omitempty"`
}

func (x *ServiceLinkState) Reset() {
	*x = ServiceLinkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLinkState) ProtoMessage() {}

func (x *ServiceLinkState) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLinkState.ProtoReflect.Descriptor instead.
func (*ServiceLinkState) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceLinkState) GetServiceLink() *ServiceLink {
	if x != nil {
		return x.ServiceLink
	}
	return nil
}

func (x *ServiceLinkState) GetType() StateChange {
	if x != nil {
		return x.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

type ServiceLinkFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      []*ServiceFilter `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty"`
	Destination []*ServiceFilter `protobuf:"bytes,2,rep,name=destination,proto3" json:"destination,omitempty"`
	// Use string here to support things like port ranges (e.g. 100-200).
	DestinationPort []string       `protobuf:"bytes,3,rep,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Verdict         []flow.Verdict `protobuf:"varint,4,rep,packed,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
}

func (x *ServiceLinkFilter) Reset() {
	*x = ServiceLinkFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLinkFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLinkFilter) ProtoMessage() {}

func (x *ServiceLinkFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLinkFilter.ProtoReflect.Descriptor instead.
func (*ServiceLinkFilter) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{13}
}

func (x *ServiceLinkFilter) GetSource() []*ServiceFilter {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ServiceLinkFilter) GetDestination() []*ServiceFilter {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *ServiceLinkFilter) GetDestinationPort() []string {
	if x != nil {
		return x.DestinationPort
	}
	return nil
}

func (x *ServiceLinkFilter) GetVerdict() []flow.Verdict {
	if x != nil {
		return x.Verdict
	}
	return nil
}

type PolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyNamespace string         `protobuf:"bytes,1,opt,name=policyNamespace,proto3" json:"policyNamespace,omitempty"`
	PolicyName      string         `protobuf:"bytes,2,opt,name=policyName,proto3" json:"policyName,omitempty"`
	Type            PolicySpecType `protobuf:"varint,3,opt,name=type,proto3,enum=ui.PolicySpecType" json:"type,omitempty"`
	Yaml            string         `protobuf:"bytes,4,opt,name=yaml,proto3" json:"yaml,omitempty"`
	Uid             string         `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *PolicySpec) Reset() {
	*x = PolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySpec) ProtoMessage() {}

func (x *PolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySpec.ProtoReflect.Descriptor instead.
func (*PolicySpec) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{14}
}

func (x *PolicySpec) GetPolicyNamespace() string {
	if x != nil {
		return x.PolicyNamespace
	}
	return ""
}

func (x *PolicySpec) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *PolicySpec) GetType() PolicySpecType {
	if x != nil {
		return x.Type
	}
	return PolicySpecType_CILIUM_NETWORK_POLICY
}

func (x *PolicySpec) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *PolicySpec) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type PolicySpecState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicySpec *PolicySpec `protobuf:"bytes,1,opt,name=policy_spec,json=policySpec,proto3" json:"policy_spec,omitempty"`
	Type       StateChange `protobuf:"varint,2,opt,name=type,proto3,enum=ui.StateChange" json:"type,omitempty"`
}

func (x *PolicySpecState) Reset() {
	*x = PolicySpecState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySpecState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySpecState) ProtoMessage() {}

func (x *PolicySpecState) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySpecState.ProtoReflect.Descriptor instead.
func (*PolicySpecState) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{15}
}

func (x *PolicySpecState) GetPolicySpec() *PolicySpec {
	if x != nil {
		return x.PolicySpec
	}
	return nil
}

func (x *PolicySpecState) GetType() StateChange {
	if x != nil {
		return x.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

type PolicySpecFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyNamespace []string         `protobuf:"bytes,1,rep,name=policyNamespace,proto3" json:"policyNamespace,omitempty"`
	PolicyName      []string         `protobuf:"bytes,2,rep,name=policyName,proto3" json:"policyName,omitempty"`
	Type            []PolicySpecType `protobuf:"varint,3,rep,packed,name=type,proto3,enum=ui.PolicySpecType" json:"type,omitempty"`
}

func (x *PolicySpecFilter) Reset() {
	*x = PolicySpecFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySpecFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySpecFilter) ProtoMessage() {}

func (x *PolicySpecFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySpecFilter.ProtoReflect.Descriptor instead.
func (*PolicySpecFilter) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{16}
}

func (x *PolicySpecFilter) GetPolicyNamespace() []string {
	if x != nil {
		return x.PolicyNamespace
	}
	return nil
}

func (x *PolicySpecFilter) GetPolicyName() []string {
	if x != nil {
		return x.PolicyName
	}
	return nil
}

func (x *PolicySpecFilter) GetType() []PolicySpecType {
	if x != nil {
		return x.Type
	}
	return nil
}

type GetTimescapeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowsRequest       *observer.GetFlowsRequest              `protobuf:"bytes,1,opt,name=flows_request,json=flowsRequest,proto3" json:"flows_request,omitempty"`
	LastSeen           *GetTimescapeDataRequest_LastDatumSeen `protobuf:"bytes,2,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	LastFlowSeenFilled bool                                   `protobuf:"varint,3,opt,name=last_flow_seen_filled,json=lastFlowSeenFilled,proto3" json:"last_flow_seen_filled,omitempty"`
	Limit              int32                                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetTimescapeDataRequest) Reset() {
	*x = GetTimescapeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimescapeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimescapeDataRequest) ProtoMessage() {}

func (x *GetTimescapeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimescapeDataRequest.ProtoReflect.Descriptor instead.
func (*GetTimescapeDataRequest) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{17}
}

func (x *GetTimescapeDataRequest) GetFlowsRequest() *observer.GetFlowsRequest {
	if x != nil {
		return x.FlowsRequest
	}
	return nil
}

func (x *GetTimescapeDataRequest) GetLastSeen() *GetTimescapeDataRequest_LastDatumSeen {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *GetTimescapeDataRequest) GetLastFlowSeenFilled() bool {
	if x != nil {
		return x.LastFlowSeenFilled
	}
	return false
}

func (x *GetTimescapeDataRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTimescapeDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*flow.Flow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
	// NOTE: this fields seem to be redundant as services and links should be
	// NOTE: streamed. So, consider it to remove.
	Service       []*Service             `protobuf:"bytes,2,rep,name=service,proto3" json:"service,omitempty"`
	ServiceLink   []*ServiceLink         `protobuf:"bytes,3,rep,name=service_link,json=serviceLink,proto3" json:"service_link,omitempty"`
	Namespaces    []*NamespaceDescriptor `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	CountStats    []*CountStats          `protobuf:"bytes,5,rep,name=count_stats,json=countStats,proto3" json:"count_stats,omitempty"`
	FlowSummaries []*FlowSummary         `protobuf:"bytes,6,rep,name=flow_summaries,json=flowSummaries,proto3" json:"flow_summaries,omitempty"`
}

func (x *GetTimescapeDataResponse) Reset() {
	*x = GetTimescapeDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimescapeDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimescapeDataResponse) ProtoMessage() {}

func (x *GetTimescapeDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimescapeDataResponse.ProtoReflect.Descriptor instead.
func (*GetTimescapeDataResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{18}
}

func (x *GetTimescapeDataResponse) GetFlows() []*flow.Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *GetTimescapeDataResponse) GetService() []*Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *GetTimescapeDataResponse) GetServiceLink() []*ServiceLink {
	if x != nil {
		return x.ServiceLink
	}
	return nil
}

func (x *GetTimescapeDataResponse) GetNamespaces() []*NamespaceDescriptor {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *GetTimescapeDataResponse) GetCountStats() []*CountStats {
	if x != nil {
		return x.CountStats
	}
	return nil
}

func (x *GetTimescapeDataResponse) GetFlowSummaries() []*FlowSummary {
	if x != nil {
		return x.FlowSummaries
	}
	return nil
}

type GetFullFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowSummaryId string `protobuf:"bytes,1,opt,name=flow_summary_id,json=flowSummaryId,proto3" json:"flow_summary_id,omitempty"`
}

func (x *GetFullFlowRequest) Reset() {
	*x = GetFullFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullFlowRequest) ProtoMessage() {}

func (x *GetFullFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullFlowRequest.ProtoReflect.Descriptor instead.
func (*GetFullFlowRequest) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{19}
}

func (x *GetFullFlowRequest) GetFlowSummaryId() string {
	if x != nil {
		return x.FlowSummaryId
	}
	return ""
}

type GetFullFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow  *flow.Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	Found bool       `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (x *GetFullFlowResponse) Reset() {
	*x = GetFullFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullFlowResponse) ProtoMessage() {}

func (x *GetFullFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullFlowResponse.ProtoReflect.Descriptor instead.
func (*GetFullFlowResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{20}
}

func (x *GetFullFlowResponse) GetFlow() *flow.Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *GetFullFlowResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type CountStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Count     int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountStats) Reset() {
	*x = CountStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountStats) ProtoMessage() {}

func (x *CountStats) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountStats.ProtoReflect.Descriptor instead.
func (*CountStats) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{21}
}

func (x *CountStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CountStats) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FlowSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time                 *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	SourcePod            string                 `protobuf:"bytes,3,opt,name=source_pod,json=sourcePod,proto3" json:"source_pod,omitempty"`
	SourceLabels         []string               `protobuf:"bytes,4,rep,name=source_labels,json=sourceLabels,proto3" json:"source_labels,omitempty"`
	SourceIp             string                 `protobuf:"bytes,5,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	DestinationPod       string                 `protobuf:"bytes,6,opt,name=destination_pod,json=destinationPod,proto3" json:"destination_pod,omitempty"`
	DestinationLabels    []string               `protobuf:"bytes,7,rep,name=destination_labels,json=destinationLabels,proto3" json:"destination_labels,omitempty"`
	DestinationIp        string                 `protobuf:"bytes,8,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	DestinationPort      uint32                 `protobuf:"varint,9,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Verdict              flow.Verdict           `protobuf:"varint,10,opt,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
	TcpFlags             *flow.TCPFlags         `protobuf:"bytes,11,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	Has                  *FlowSummary_HasProps  `protobuf:"bytes,12,opt,name=has,proto3" json:"has,omitempty"`
	DestinationNames     []string               `protobuf:"bytes,14,rep,name=destination_names,json=destinationNames,proto3" json:"destination_names,omitempty"`
	SourceWorkloads      []*flow.Workload       `protobuf:"bytes,15,rep,name=source_workloads,json=sourceWorkloads,proto3" json:"source_workloads,omitempty"`
	DestinationWorkloads []*flow.Workload       `protobuf:"bytes,16,rep,name=destination_workloads,json=destinationWorkloads,proto3" json:"destination_workloads,omitempty"`
	AuthType             flow.AuthType          `protobuf:"varint,17,opt,name=auth_type,json=authType,proto3,enum=flow.AuthType" json:"auth_type,omitempty"`
}

func (x *FlowSummary) Reset() {
	*x = FlowSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSummary) ProtoMessage() {}

func (x *FlowSummary) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSummary.ProtoReflect.Descriptor instead.
func (*FlowSummary) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{22}
}

func (x *FlowSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowSummary) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FlowSummary) GetSourcePod() string {
	if x != nil {
		return x.SourcePod
	}
	return ""
}

func (x *FlowSummary) GetSourceLabels() []string {
	if x != nil {
		return x.SourceLabels
	}
	return nil
}

func (x *FlowSummary) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *FlowSummary) GetDestinationPod() string {
	if x != nil {
		return x.DestinationPod
	}
	return ""
}

func (x *FlowSummary) GetDestinationLabels() []string {
	if x != nil {
		return x.DestinationLabels
	}
	return nil
}

func (x *FlowSummary) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *FlowSummary) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *FlowSummary) GetVerdict() flow.Verdict {
	if x != nil {
		return x.Verdict
	}
	return flow.Verdict(0)
}

func (x *FlowSummary) GetTcpFlags() *flow.TCPFlags {
	if x != nil {
		return x.TcpFlags
	}
	return nil
}

func (x *FlowSummary) GetHas() *FlowSummary_HasProps {
	if x != nil {
		return x.Has
	}
	return nil
}

func (x *FlowSummary) GetDestinationNames() []string {
	if x != nil {
		return x.DestinationNames
	}
	return nil
}

func (x *FlowSummary) GetSourceWorkloads() []*flow.Workload {
	if x != nil {
		return x.SourceWorkloads
	}
	return nil
}

func (x *FlowSummary) GetDestinationWorkloads() []*flow.Workload {
	if x != nil {
		return x.DestinationWorkloads
	}
	return nil
}

func (x *FlowSummary) GetAuthType() flow.AuthType {
	if x != nil {
		return x.AuthType
	}
	return flow.AuthType(0)
}

type GetControlStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetControlStreamRequest) Reset() {
	*x = GetControlStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlStreamRequest) ProtoMessage() {}

func (x *GetControlStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlStreamRequest.ProtoReflect.Descriptor instead.
func (*GetControlStreamRequest) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{23}
}

type GetControlStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*GetControlStreamResponse_Namespaces
	//	*GetControlStreamResponse_Notification
	Event isGetControlStreamResponse_Event `protobuf_oneof:"event"`
}

func (x *GetControlStreamResponse) Reset() {
	*x = GetControlStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlStreamResponse) ProtoMessage() {}

func (x *GetControlStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlStreamResponse.ProtoReflect.Descriptor instead.
func (*GetControlStreamResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{24}
}

func (m *GetControlStreamResponse) GetEvent() isGetControlStreamResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GetControlStreamResponse) GetNamespaces() *GetControlStreamResponse_NamespaceStates {
	if x, ok := x.GetEvent().(*GetControlStreamResponse_Namespaces); ok {
		return x.Namespaces
	}
	return nil
}

func (x *GetControlStreamResponse) GetNotification() *Notification {
	if x, ok := x.GetEvent().(*GetControlStreamResponse_Notification); ok {
		return x.Notification
	}
	return nil
}

type isGetControlStreamResponse_Event interface {
	isGetControlStreamResponse_Event()
}

type GetControlStreamResponse_Namespaces struct {
	Namespaces *GetControlStreamResponse_NamespaceStates `protobuf:"bytes,1,opt,name=namespaces,proto3,oneof"`
}

type GetControlStreamResponse_Notification struct {
	Notification *Notification `protobuf:"bytes,2,opt,name=notification,proto3,oneof"`
}

func (*GetControlStreamResponse_Namespaces) isGetControlStreamResponse_Event() {}

func (*GetControlStreamResponse_Notification) isGetControlStreamResponse_Event() {}

type GetTimescapePodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *v1.GetContainersFromEventsRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetTimescapePodsRequest) Reset() {
	*x = GetTimescapePodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimescapePodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimescapePodsRequest) ProtoMessage() {}

func (x *GetTimescapePodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimescapePodsRequest.ProtoReflect.Descriptor instead.
func (*GetTimescapePodsRequest) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{25}
}

func (x *GetTimescapePodsRequest) GetRequest() *v1.GetContainersFromEventsRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetTimescapePodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.GetContainersFromEventsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetTimescapePodsResponse) Reset() {
	*x = GetTimescapePodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimescapePodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimescapePodsResponse) ProtoMessage() {}

func (x *GetTimescapePodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimescapePodsResponse.ProtoReflect.Descriptor instead.
func (*GetTimescapePodsResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{26}
}

func (x *GetTimescapePodsResponse) GetResponse() *v1.GetContainersFromEventsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetServiceMapFromLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs      []byte         `protobuf:"bytes,1,opt,name=logs,proto3" json:"logs,omitempty"`
	Blacklist []*EventFilter `protobuf:"bytes,2,rep,name=blacklist,proto3" json:"blacklist,omitempty"`
	Whitelist []*EventFilter `protobuf:"bytes,3,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
}

func (x *GetServiceMapFromLogsRequest) Reset() {
	*x = GetServiceMapFromLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceMapFromLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceMapFromLogsRequest) ProtoMessage() {}

func (x *GetServiceMapFromLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceMapFromLogsRequest.ProtoReflect.Descriptor instead.
func (*GetServiceMapFromLogsRequest) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{27}
}

func (x *GetServiceMapFromLogsRequest) GetLogs() []byte {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *GetServiceMapFromLogsRequest) GetBlacklist() []*EventFilter {
	if x != nil {
		return x.Blacklist
	}
	return nil
}

func (x *GetServiceMapFromLogsRequest) GetWhitelist() []*EventFilter {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

type GetServiceMapFromLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*Service     `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	Links    []*ServiceLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *GetServiceMapFromLogsResponse) Reset() {
	*x = GetServiceMapFromLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceMapFromLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceMapFromLogsResponse) ProtoMessage() {}

func (x *GetServiceMapFromLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceMapFromLogsResponse.ProtoReflect.Descriptor instead.
func (*GetServiceMapFromLogsResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{28}
}

func (x *GetServiceMapFromLogsResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *GetServiceMapFromLogsResponse) GetLinks() []*ServiceLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type GetTimescapeK8SEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*v11.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetTimescapeK8SEventsResponse) Reset() {
	*x = GetTimescapeK8SEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimescapeK8SEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimescapeK8SEventsResponse) ProtoMessage() {}

func (x *GetTimescapeK8SEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimescapeK8SEventsResponse.ProtoReflect.Descriptor instead.
func (*GetTimescapeK8SEventsResponse) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{29}
}

func (x *GetTimescapeK8SEventsResponse) GetEvents() []*v11.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ServiceLink_Latency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *durationpb.Duration `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *durationpb.Duration `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Avg *durationpb.Duration `protobuf:"bytes,3,opt,name=avg,proto3" json:"avg,omitempty"`
}

func (x *ServiceLink_Latency) Reset() {
	*x = ServiceLink_Latency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLink_Latency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLink_Latency) ProtoMessage() {}

func (x *ServiceLink_Latency) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLink_Latency.ProtoReflect.Descriptor instead.
func (*ServiceLink_Latency) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ServiceLink_Latency) GetMin() *durationpb.Duration {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ServiceLink_Latency) GetMax() *durationpb.Duration {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ServiceLink_Latency) GetAvg() *durationpb.Duration {
	if x != nil {
		return x.Avg
	}
	return nil
}

type GetTimescapeDataRequest_LastDatumSeen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetTimescapeDataRequest_LastDatumSeen) Reset() {
	*x = GetTimescapeDataRequest_LastDatumSeen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimescapeDataRequest_LastDatumSeen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimescapeDataRequest_LastDatumSeen) ProtoMessage() {}

func (x *GetTimescapeDataRequest_LastDatumSeen) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimescapeDataRequest_LastDatumSeen.ProtoReflect.Descriptor instead.
func (*GetTimescapeDataRequest_LastDatumSeen) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetTimescapeDataRequest_LastDatumSeen) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTimescapeDataRequest_LastDatumSeen) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type FlowSummary_HasProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPort bool `protobuf:"varint,1,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	TcpFlags        bool `protobuf:"varint,2,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
}

func (x *FlowSummary_HasProps) Reset() {
	*x = FlowSummary_HasProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSummary_HasProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSummary_HasProps) ProtoMessage() {}

func (x *FlowSummary_HasProps) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSummary_HasProps.ProtoReflect.Descriptor instead.
func (*FlowSummary_HasProps) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{22, 0}
}

func (x *FlowSummary_HasProps) GetDestinationPort() bool {
	if x != nil {
		return x.DestinationPort
	}
	return false
}

func (x *FlowSummary_HasProps) GetTcpFlags() bool {
	if x != nil {
		return x.TcpFlags
	}
	return false
}

type GetControlStreamResponse_NamespaceStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*NamespaceState `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *GetControlStreamResponse_NamespaceStates) Reset() {
	*x = GetControlStreamResponse_NamespaceStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ui_ui_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlStreamResponse_NamespaceStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlStreamResponse_NamespaceStates) ProtoMessage() {}

func (x *GetControlStreamResponse_NamespaceStates) ProtoReflect() protoreflect.Message {
	mi := &file_ui_ui_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlStreamResponse_NamespaceStates.ProtoReflect.Descriptor instead.
func (*GetControlStreamResponse_NamespaceStates) Descriptor() ([]byte, []int) {
	return file_ui_ui_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GetControlStreamResponse_NamespaceStates) GetNamespaces() []*NamespaceState {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

var File_ui_ui_proto protoreflect.FileDescriptor

var file_ui_ui_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x75, 0x69, 0x2f, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x75,
	0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x69,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x75, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x75, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x75, 0x69, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2f, 0x76, 0x30, 0x2f, 0x6b, 0x38, 0x73, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6b, 0x38, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x75, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x73,
	0x6f, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x69, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x75, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x12, 0x36, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x29, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x3b, 0x0a,
	0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x69,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x75, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x0e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x75,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xc8, 0x04, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x69, 0x2e, 0x49, 0x50, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x75, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x90, 0x01, 0x0a, 0x07, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x2b, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x76, 0x67, 0x22, 0x6b, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x69,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x75, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x75, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x53, 0x65, 0x65, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x59, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xb9, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x0a,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x69,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x3c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x5c, 0x0a, 0x0a, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x06, 0x0a, 0x0b, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x09,
	0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x68, 0x61, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x69, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x52, 0x03, 0x68, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x43, 0x0a,
	0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x52, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf2,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x75, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x69, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x6f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x22, 0x4b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x4b, 0x38, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x38, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x95,
	0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x38, 0x53,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x07, 0x2a, 0x51, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x49, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x56, 0x34, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x43, 0x4d, 0x50, 0x5f, 0x56, 0x36, 0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x49, 0x4c, 0x49, 0x55, 0x4d, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x49, 0x4c, 0x49, 0x55, 0x4d, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x32, 0xeb, 0x08, 0x0a, 0x02, 0x55, 0x49, 0x12, 0x3c,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x75, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x75, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x1a, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x12, 0x1b, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4b, 0x38,
	0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x4b, 0x38, 0x53, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x75, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x75,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x75, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x20,
	0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ui_ui_proto_rawDescOnce sync.Once
	file_ui_ui_proto_rawDescData = file_ui_ui_proto_rawDesc
)

func file_ui_ui_proto_rawDescGZIP() []byte {
	file_ui_ui_proto_rawDescOnce.Do(func() {
		file_ui_ui_proto_rawDescData = protoimpl.X.CompressGZIP(file_ui_ui_proto_rawDescData)
	})
	return file_ui_ui_proto_rawDescData
}

var file_ui_ui_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ui_ui_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_ui_ui_proto_goTypes = []interface{}{
	(EventType)(0),                                   // 0: ui.EventType
	(IPProtocol)(0),                                  // 1: ui.IPProtocol
	(PolicySpecType)(0),                              // 2: ui.PolicySpecType
	(StateChange)(0),                                 // 3: ui.StateChange
	(*GetEventsRequest)(nil),                         // 4: ui.GetEventsRequest
	(*GetEventsResponse)(nil),                        // 5: ui.GetEventsResponse
	(*Event)(nil),                                    // 6: ui.Event
	(*Flows)(nil),                                    // 7: ui.Flows
	(*Policies)(nil),                                 // 8: ui.Policies
	(*EventFilter)(nil),                              // 9: ui.EventFilter
	(*NamespaceDescriptor)(nil),                      // 10: ui.NamespaceDescriptor
	(*NamespaceState)(nil),                           // 11: ui.NamespaceState
	(*Service)(nil),                                  // 12: ui.Service
	(*ServiceState)(nil),                             // 13: ui.ServiceState
	(*ServiceFilter)(nil),                            // 14: ui.ServiceFilter
	(*ServiceLink)(nil),                              // 15: ui.ServiceLink
	(*ServiceLinkState)(nil),                         // 16: ui.ServiceLinkState
	(*ServiceLinkFilter)(nil),                        // 17: ui.ServiceLinkFilter
	(*PolicySpec)(nil),                               // 18: ui.PolicySpec
	(*PolicySpecState)(nil),                          // 19: ui.PolicySpecState
	(*PolicySpecFilter)(nil),                         // 20: ui.PolicySpecFilter
	(*GetTimescapeDataRequest)(nil),                  // 21: ui.GetTimescapeDataRequest
	(*GetTimescapeDataResponse)(nil),                 // 22: ui.GetTimescapeDataResponse
	(*GetFullFlowRequest)(nil),                       // 23: ui.GetFullFlowRequest
	(*GetFullFlowResponse)(nil),                      // 24: ui.GetFullFlowResponse
	(*CountStats)(nil),                               // 25: ui.CountStats
	(*FlowSummary)(nil),                              // 26: ui.FlowSummary
	(*GetControlStreamRequest)(nil),                  // 27: ui.GetControlStreamRequest
	(*GetControlStreamResponse)(nil),                 // 28: ui.GetControlStreamResponse
	(*GetTimescapePodsRequest)(nil),                  // 29: ui.GetTimescapePodsRequest
	(*GetTimescapePodsResponse)(nil),                 // 30: ui.GetTimescapePodsResponse
	(*GetServiceMapFromLogsRequest)(nil),             // 31: ui.GetServiceMapFromLogsRequest
	(*GetServiceMapFromLogsResponse)(nil),            // 32: ui.GetServiceMapFromLogsResponse
	(*GetTimescapeK8SEventsResponse)(nil),            // 33: ui.GetTimescapeK8SEventsResponse
	(*ServiceLink_Latency)(nil),                      // 34: ui.ServiceLink.Latency
	(*GetTimescapeDataRequest_LastDatumSeen)(nil),    // 35: ui.GetTimescapeDataRequest.LastDatumSeen
	(*FlowSummary_HasProps)(nil),                     // 36: ui.FlowSummary.HasProps
	(*GetControlStreamResponse_NamespaceStates)(nil), // 37: ui.GetControlStreamResponse.NamespaceStates
	(*timestamppb.Timestamp)(nil),                    // 38: google.protobuf.Timestamp
	(*GetStatusRequest)(nil),                         // 39: ui.GetStatusRequest
	(*aggregation.Aggregation)(nil),                  // 40: isovalent.flow.aggregation.Aggregation
	(*flow.Flow)(nil),                                // 41: flow.Flow
	(*Notification)(nil),                             // 42: ui.Notification
	(*flow.FlowFilter)(nil),                          // 43: flow.FlowFilter
	(*flow.Workload)(nil),                            // 44: flow.Workload
	(flow.Verdict)(0),                                // 45: flow.Verdict
	(flow.AuthType)(0),                               // 46: flow.AuthType
	(*observer.GetFlowsRequest)(nil),                 // 47: observer.GetFlowsRequest
	(*flow.TCPFlags)(nil),                            // 48: flow.TCPFlags
	(*v1.GetContainersFromEventsRequest)(nil),        // 49: timescape.v1.GetContainersFromEventsRequest
	(*v1.GetContainersFromEventsResponse)(nil),       // 50: timescape.v1.GetContainersFromEventsResponse
	(*v11.Event)(nil),                                // 51: k8sevent.v1.Event
	(*durationpb.Duration)(nil),                      // 52: google.protobuf.Duration
	(*observer.ServerStatusRequest)(nil),             // 53: observer.ServerStatusRequest
	(*observer.GetNodesRequest)(nil),                 // 54: observer.GetNodesRequest
	(*GetAuthzRequest)(nil),                          // 55: ui.GetAuthzRequest
	(*GetFeatureFlagsRequest)(nil),                   // 56: ui.GetFeatureFlagsRequest
	(*v0.GetK8SEventsRequest)(nil),                   // 57: timescape.v0.GetK8sEventsRequest
	(*GetTimescapeProcessEventsRequest)(nil),         // 58: ui.GetTimescapeProcessEventsRequest
	(*GetStatusResponse)(nil),                        // 59: ui.GetStatusResponse
	(*observer.ServerStatusResponse)(nil),            // 60: observer.ServerStatusResponse
	(*observer.GetNodesResponse)(nil),                // 61: observer.GetNodesResponse
	(*GetAuthzResponse)(nil),                         // 62: ui.GetAuthzResponse
	(*GetFeatureFlagsResponse)(nil),                  // 63: ui.GetFeatureFlagsResponse
	(*GetTimescapeProcessEventsResponse)(nil),        // 64: ui.GetTimescapeProcessEventsResponse
}
var file_ui_ui_proto_depIdxs = []int32{
	0,  // 0: ui.GetEventsRequest.event_types:type_name -> ui.EventType
	9,  // 1: ui.GetEventsRequest.blacklist:type_name -> ui.EventFilter
	9,  // 2: ui.GetEventsRequest.whitelist:type_name -> ui.EventFilter
	38, // 3: ui.GetEventsRequest.since:type_name -> google.protobuf.Timestamp
	39, // 4: ui.GetEventsRequest.status_request:type_name -> ui.GetStatusRequest
	40, // 5: ui.GetEventsRequest.aggregation:type_name -> isovalent.flow.aggregation.Aggregation
	38, // 6: ui.GetEventsResponse.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 7: ui.GetEventsResponse.events:type_name -> ui.Event
	41, // 8: ui.Event.flow:type_name -> flow.Flow
	11, // 9: ui.Event.namespace_state:type_name -> ui.NamespaceState
	13, // 10: ui.Event.service_state:type_name -> ui.ServiceState
	16, // 11: ui.Event.service_link_state:type_name -> ui.ServiceLinkState
	8,  // 12: ui.Event.policies:type_name -> ui.Policies
	7,  // 13: ui.Event.flows:type_name -> ui.Flows
	42, // 14: ui.Event.notification:type_name -> ui.Notification
	41, // 15: ui.Flows.flows:type_name -> flow.Flow
	19, // 16: ui.Policies.policies:type_name -> ui.PolicySpecState
	43, // 17: ui.EventFilter.flow_filter:type_name -> flow.FlowFilter
	14, // 18: ui.EventFilter.service_filter:type_name -> ui.ServiceFilter
	17, // 19: ui.EventFilter.service_link_filter:type_name -> ui.ServiceLinkFilter
	20, // 20: ui.EventFilter.policy_spec_filter:type_name -> ui.PolicySpecFilter
	38, // 21: ui.NamespaceDescriptor.creation_timestamp:type_name -> google.protobuf.Timestamp
	10, // 22: ui.NamespaceState.namespace:type_name -> ui.NamespaceDescriptor
	3,  // 23: ui.NamespaceState.type:type_name -> ui.StateChange
	38, // 24: ui.Service.creation_timestamp:type_name -> google.protobuf.Timestamp
	44, // 25: ui.Service.workloads:type_name -> flow.Workload
	12, // 26: ui.ServiceState.service:type_name -> ui.Service
	3,  // 27: ui.ServiceState.type:type_name -> ui.StateChange
	1,  // 28: ui.ServiceLink.ip_protocol:type_name -> ui.IPProtocol
	45, // 29: ui.ServiceLink.verdict:type_name -> flow.Verdict
	34, // 30: ui.ServiceLink.latency:type_name -> ui.ServiceLink.Latency
	46, // 31: ui.ServiceLink.auth_type:type_name -> flow.AuthType
	15, // 32: ui.ServiceLinkState.service_link:type_name -> ui.ServiceLink
	3,  // 33: ui.ServiceLinkState.type:type_name -> ui.StateChange
	14, // 34: ui.ServiceLinkFilter.source:type_name -> ui.ServiceFilter
	14, // 35: ui.ServiceLinkFilter.destination:type_name -> ui.ServiceFilter
	45, // 36: ui.ServiceLinkFilter.verdict:type_name -> flow.Verdict
	2,  // 37: ui.PolicySpec.type:type_name -> ui.PolicySpecType
	18, // 38: ui.PolicySpecState.policy_spec:type_name -> ui.PolicySpec
	3,  // 39: ui.PolicySpecState.type:type_name -> ui.StateChange
	2,  // 40: ui.PolicySpecFilter.type:type_name -> ui.PolicySpecType
	47, // 41: ui.GetTimescapeDataRequest.flows_request:type_name -> observer.GetFlowsRequest
	35, // 42: ui.GetTimescapeDataRequest.last_seen:type_name -> ui.GetTimescapeDataRequest.LastDatumSeen
	41, // 43: ui.GetTimescapeDataResponse.flows:type_name -> flow.Flow
	12, // 44: ui.GetTimescapeDataResponse.service:type_name -> ui.Service
	15, // 45: ui.GetTimescapeDataResponse.service_link:type_name -> ui.ServiceLink
	10, // 46: ui.GetTimescapeDataResponse.namespaces:type_name -> ui.NamespaceDescriptor
	25, // 47: ui.GetTimescapeDataResponse.count_stats:type_name -> ui.CountStats
	26, // 48: ui.GetTimescapeDataResponse.flow_summaries:type_name -> ui.FlowSummary
	41, // 49: ui.GetFullFlowResponse.flow:type_name -> flow.Flow
	38, // 50: ui.CountStats.timestamp:type_name -> google.protobuf.Timestamp
	38, // 51: ui.FlowSummary.time:type_name -> google.protobuf.Timestamp
	45, // 52: ui.FlowSummary.verdict:type_name -> flow.Verdict
	48, // 53: ui.FlowSummary.tcp_flags:type_name -> flow.TCPFlags
	36, // 54: ui.FlowSummary.has:type_name -> ui.FlowSummary.HasProps
	44, // 55: ui.FlowSummary.source_workloads:type_name -> flow.Workload
	44, // 56: ui.FlowSummary.destination_workloads:type_name -> flow.Workload
	46, // 57: ui.FlowSummary.auth_type:type_name -> flow.AuthType
	37, // 58: ui.GetControlStreamResponse.namespaces:type_name -> ui.GetControlStreamResponse.NamespaceStates
	42, // 59: ui.GetControlStreamResponse.notification:type_name -> ui.Notification
	49, // 60: ui.GetTimescapePodsRequest.request:type_name -> timescape.v1.GetContainersFromEventsRequest
	50, // 61: ui.GetTimescapePodsResponse.response:type_name -> timescape.v1.GetContainersFromEventsResponse
	9,  // 62: ui.GetServiceMapFromLogsRequest.blacklist:type_name -> ui.EventFilter
	9,  // 63: ui.GetServiceMapFromLogsRequest.whitelist:type_name -> ui.EventFilter
	12, // 64: ui.GetServiceMapFromLogsResponse.services:type_name -> ui.Service
	15, // 65: ui.GetServiceMapFromLogsResponse.links:type_name -> ui.ServiceLink
	51, // 66: ui.GetTimescapeK8SEventsResponse.events:type_name -> k8sevent.v1.Event
	52, // 67: ui.ServiceLink.Latency.min:type_name -> google.protobuf.Duration
	52, // 68: ui.ServiceLink.Latency.max:type_name -> google.protobuf.Duration
	52, // 69: ui.ServiceLink.Latency.avg:type_name -> google.protobuf.Duration
	38, // 70: ui.GetTimescapeDataRequest.LastDatumSeen.timestamp:type_name -> google.protobuf.Timestamp
	11, // 71: ui.GetControlStreamResponse.NamespaceStates.namespaces:type_name -> ui.NamespaceState
	4,  // 72: ui.UI.GetEvents:input_type -> ui.GetEventsRequest
	39, // 73: ui.UI.GetStatus:input_type -> ui.GetStatusRequest
	53, // 74: ui.UI.GetHubbleServerStatus:input_type -> observer.ServerStatusRequest
	54, // 75: ui.UI.GetHubbleNodes:input_type -> observer.GetNodesRequest
	55, // 76: ui.UI.GetAuthorization:input_type -> ui.GetAuthzRequest
	56, // 77: ui.UI.GetFeatureFlags:input_type -> ui.GetFeatureFlagsRequest
	21, // 78: ui.UI.GetTimescapeFlows:input_type -> ui.GetTimescapeDataRequest
	57, // 79: ui.UI.GetTimescapeK8SEvents:input_type -> timescape.v0.GetK8sEventsRequest
	21, // 80: ui.UI.GetTimescapeFlowStats:input_type -> ui.GetTimescapeDataRequest
	23, // 81: ui.UI.GetFullFlow:input_type -> ui.GetFullFlowRequest
	27, // 82: ui.UI.GetControlStream:input_type -> ui.GetControlStreamRequest
	29, // 83: ui.UI.GetTimescapePods:input_type -> ui.GetTimescapePodsRequest
	58, // 84: ui.UI.GetTimescapeProcessEvents:input_type -> ui.GetTimescapeProcessEventsRequest
	31, // 85: ui.UI.GetServiceMapFromLogs:input_type -> ui.GetServiceMapFromLogsRequest
	5,  // 86: ui.UI.GetEvents:output_type -> ui.GetEventsResponse
	59, // 87: ui.UI.GetStatus:output_type -> ui.GetStatusResponse
	60, // 88: ui.UI.GetHubbleServerStatus:output_type -> observer.ServerStatusResponse
	61, // 89: ui.UI.GetHubbleNodes:output_type -> observer.GetNodesResponse
	62, // 90: ui.UI.GetAuthorization:output_type -> ui.GetAuthzResponse
	63, // 91: ui.UI.GetFeatureFlags:output_type -> ui.GetFeatureFlagsResponse
	22, // 92: ui.UI.GetTimescapeFlows:output_type -> ui.GetTimescapeDataResponse
	33, // 93: ui.UI.GetTimescapeK8SEvents:output_type -> ui.GetTimescapeK8SEventsResponse
	22, // 94: ui.UI.GetTimescapeFlowStats:output_type -> ui.GetTimescapeDataResponse
	24, // 95: ui.UI.GetFullFlow:output_type -> ui.GetFullFlowResponse
	28, // 96: ui.UI.GetControlStream:output_type -> ui.GetControlStreamResponse
	30, // 97: ui.UI.GetTimescapePods:output_type -> ui.GetTimescapePodsResponse
	64, // 98: ui.UI.GetTimescapeProcessEvents:output_type -> ui.GetTimescapeProcessEventsResponse
	32, // 99: ui.UI.GetServiceMapFromLogs:output_type -> ui.GetServiceMapFromLogsResponse
	86, // [86:100] is the sub-list for method output_type
	72, // [72:86] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_ui_ui_proto_init() }
func file_ui_ui_proto_init() {
	if File_ui_ui_proto != nil {
		return
	}
	file_ui_notifications_proto_init()
	file_ui_status_proto_init()
	file_ui_process_events_proto_init()
	file_ui_authorization_proto_init()
	file_ui_feature_flags_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ui_ui_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLinkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLinkFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpecState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySpecFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimescapeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimescapeDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimescapePodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimescapePodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceMapFromLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceMapFromLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimescapeK8SEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLink_Latency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimescapeDataRequest_LastDatumSeen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSummary_HasProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ui_ui_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlStreamResponse_NamespaceStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ui_ui_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Event_Flow)(nil),
		(*Event_NamespaceState)(nil),
		(*Event_ServiceState)(nil),
		(*Event_ServiceLinkState)(nil),
		(*Event_Policies)(nil),
		(*Event_Flows)(nil),
		(*Event_Notification)(nil),
	}
	file_ui_ui_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EventFilter_FlowFilter)(nil),
		(*EventFilter_ServiceFilter)(nil),
		(*EventFilter_ServiceLinkFilter)(nil),
		(*EventFilter_PolicySpecFilter)(nil),
	}
	file_ui_ui_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*GetControlStreamResponse_Namespaces)(nil),
		(*GetControlStreamResponse_Notification)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ui_ui_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ui_ui_proto_goTypes,
		DependencyIndexes: file_ui_ui_proto_depIdxs,
		EnumInfos:         file_ui_ui_proto_enumTypes,
		MessageInfos:      file_ui_ui_proto_msgTypes,
	}.Build()
	File_ui_ui_proto = out.File
	file_ui_ui_proto_rawDesc = nil
	file_ui_ui_proto_goTypes = nil
	file_ui_ui_proto_depIdxs = nil
}
