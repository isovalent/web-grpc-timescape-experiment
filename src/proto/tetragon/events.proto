// Copyright 2020 Authors of Hubble
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tetragon;

import "tetragon/tetragon.proto";
import "tetragon/fgs.proto";
import "tetragon/dns.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

// Represents the type of a Tetragon event.
//
// NOTE: EventType constants must be in sync with the numbers used in the
// GetEventsResponse event oneof.
enum EventType {
    option allow_alias = true;
	UNDEF = 0;
	PROCESS_EXEC = 1;
	PROCESS_CONNECT = 2;
	PROCESS_LISTEN = 3;
	PROCESS_TLS = 4;
    // TLS is an alias for PROCESS_TLS
	TLS = 4;
	PROCESS_EXIT = 5;
	PROCESS_CLOSE = 6;
	PROCESS_ACCEPT = 7;
	PROCESS_KPROBE = 9;
	PROCESS_TRACEPOINT = 10;
	PROCESS_SOCKSTATS = 11;
    // PROCESS_SOCK_STATS is an alias for PROCESS_SOCKSTATS
	PROCESS_SOCK_STATS = 11;
	PROCESS_HTTP = 12;
	INTERFACE_STATS = 13;
	PROCESS_DNS = 14;
	PROCESS_NETWORK_BURST = 15;
	PROCESS_FILE = 16;
	PROCESS_IP_ERROR = 17;
	PROCESS_LOADER = 18;
	PROCESS_NETWORK_WATERMARK = 19;
	PROCESS_UPROBE = 20;
	PROCESS_UDP_SEQ_CHECK_ERROR = 21;
	PROCESS_FILE_EXEC = 22;

	TEST = 40000;
    RATE_LIMIT_INFO = 40001;
}

message Filter {
    repeated string binary_regex = 1;
    repeated string namespace = 2;
    google.protobuf.BoolValue health_check = 3;
    repeated uint32 pid = 4;
    repeated uint32 pid_set = 5;
    repeated EventType event_set = 6;
    // A series of regexes for filtering over pod name
    repeated string pod_regex = 7;
    // Filter by process.arguments field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string arguments_regex = 8;
    // Filter events by pod labels using Kubernetes label selector syntax:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    // Note that this filter never matches events without the pod field (i.e.
    // host process events).
    repeated string labels = 9;
    // Filter by source_ip field using an address range specified using CIDR notation.
    //
    // Example: {"event_set": ["PROCESS_ACCEPT"], "source_ip_cidr": ["127.0.0.0/16"]}
    repeated string source_ip_cidr = 1000;
    // Filter by destination_ip field using an address range specified using CIDR notation.
    //
    // Example: {"event_set": ["PROCESS_CLOSE"], "destination_ip_cidr": ["8.8.0.0/16"]}
    repeated string destination_ip_cidr = 1001;
    // Filter by IP field using an address range specified using CIDR notation.
    // This includes source_ip, destination_ip, and ProcessListen's ip field.
    //
    // Example 1: {"event_set": ["PROCESS_ACCEPT"], ip_cidr": ["127.0.0.1", "8.8.0.0/16"]}
    // Example 2: {"event_set": ["PROCESS_LISTEN"], ip_cidr": ["127.0.0.0/16"]}
    repeated string ip_cidr = 1002;
    // Filter by http.request.uri field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string uri_regex = 1003;
    // Filter by tls.sni_name field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string sni_regex = 1004;
    // Filter by destination_names field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string destination_names_regex = 1005;
    // Filter by destination_pod.name field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string destination_pod_regex = 1006;
    // Filter by process_dns.dns.names field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string dns_names_regex = 1007;
    // Filter by process_http.http.request.host field using RE2 regular expression syntax:
    // https://github.com/google/re2/wiki/Syntax
    repeated string host_regex = 1008;
}

message RateLimitInfo {
    uint64 number_of_dropped_process_events = 1;
}

// Determins the behaviour of a field filter
enum FieldFilterAction {
    INCLUDE = 0;
    EXCLUDE = 1;
}

message FieldFilter {
    // Event types to filter or undefined to filter over all event types.
    repeated EventType event_set = 1;
    // Fields to include or exclude.
    google.protobuf.FieldMask fields = 2;
    // Whether to include or exclude fields.
    FieldFilterAction action = 3;
    // Whether or not the event set filter should be inverted.
    google.protobuf.BoolValue invert_event_set = 4;
}

// AggregationOptions defines configuration options for aggregating events.
message AggregationOptions {
    // Aggregation window size. Defaults to 15 seconds if this field is not set.
    google.protobuf.Duration window_size = 1;
    // Size of the buffer for the aggregator to receive incoming events. If the
    // buffer becomes full, the aggregator will log a warning and start dropping
    // incoming events.
    uint64 channel_buffer_size = 2;
}

message GetEventsRequest {
    // allow_list specifies a list of filters to apply to only return certain
    // events. If multiple filters are specified, at least one of them has to
    // match for an event to be included in the results.
    repeated Filter allow_list = 1;
    // deny_list specifies a list of filters to apply to exclude certain events
    // from the results. If multiple filters are specified, at least one of
    // them has to match for an event to be excluded.
    //
    // If both allow_list and deny_list are specified, the results contain the
    // set difference allow_list - deny_list.
    repeated Filter deny_list = 2;
    // aggregation_options configures aggregation options for this request.
    // If this field is not set, responses will not be aggregated.
    //
    // Note that currently only process_accept and process_connect events are
    // aggregated. Other events remain unaggregated.
    AggregationOptions aggregation_options = 3;
    // Fields to include or exclude for events in the GetEventsResponse. Omitting this
    // field implies that all fields will be included. Exclusion always takes precedence
    // over inclusion in the case of conflicts.
    repeated FieldFilter field_filters = 4;
}

// AggregationInfo contains information about aggregation results.
message AggregationInfo {
    // Total count of events in this aggregation time window.
    uint64 count = 1;
}

message GetEventsResponse {
    // The type-specific fields of an event.
    //
    // NOTE: Numbers must stay in sync with enum EventType.
    oneof event {
        ProcessExec process_exec = 1;
        ProcessConnect process_connect = 2;
        ProcessListen process_listen = 3;
        Tls tls = 4;
        ProcessExit process_exit = 5;
        ProcessClose process_close = 6;
        ProcessAccept process_accept = 7;
        ProcessKprobe process_kprobe = 9;
        ProcessTracepoint process_tracepoint = 10;
        ProcessSockStats process_sock_stats = 11;
        ProcessHttp process_http = 12;
        InterfaceStats interface_stats = 13;
        ProcessDns process_dns = 14;
        ProcessNetworkBurst process_network_burst = 15;
        ProcessFile process_file = 16;
        ProcessIpError process_ip_error = 17;
        ProcessLoader process_loader = 18;
        ProcessNetworkWatermark process_network_watermark = 19;
        ProcessUprobe process_uprobe = 20;
        ProcessUdpSeqCheckError process_udp_seq_check_error = 21;
        ProcessFileExec process_file_exec = 22;

        Test test = 40000;
        RateLimitInfo rate_limit_info = 40001;
    }
    // Name of the node where this event was observed.
    string node_name = 1000;
    // Timestamp at which this event was observed.
    //
    // For an aggregated response, this field to set to the timestamp at which
    // the event was observed for the first time in a given aggregation time window.
    google.protobuf.Timestamp time = 1001;

    // aggregation_info contains information about aggregation results. This field
    // is set only for aggregated responses.
    AggregationInfo aggregation_info = 1002;
}


